#include "SyncMessages.h"

const int STATUS_REPORT_DELAY_MILLIS = 500;


string serializeStatusUpdateMsg(SamplingUnitStatusMessage status){
    stringstream ss;
    // Add the command
    ss << status;
    return ss.str();
}

SamplingUnitStatusMessage deserializeStatusUpdateMsg(const uint8_t* msg, int len) {
    if (msg == nullptr || len <= 0) {
        throw InvalidSyncMessage();
    }

    // Convert the message to a string
    string statusStr(reinterpret_cast<const char*>(msg), len);

    // Match the status string to the enum
    int statusValue = stoi(statusStr);
    if (statusValue < STAND_BY || statusValue > ERROR) {
        throw InvalidSyncMessage();
    }
    SamplingUnitStatusMessage status = static_cast<SamplingUnitStatusMessage>(statusValue);
    return status;
}

string serializeCommand(const ControlUnitCommand& command, const std::map<string,string>& params) {
    /*
        Parse ControlUnitCommand object to a string:
        Format: [command]|[param_key_1]:[param_value_1];[param_key_2]:[param_value_2]...
    */
    stringstream ss;

    // Add the command
    ss << command;
    if(!params.empty()){
        ss << "|";
        // Add the parameters
        for (const auto& param : params) {
            ss << param.first << ":" << param.second << ";";
        }
    }
    
    // Remove trailing semicolon (if any)
    string result = ss.str();
    if (result.back() == ';') {
        result.pop_back();
    }
    return result;
}

CommandMessage deserializeCommand(const uint8_t* msg, int len) {
    /*
        Parse the message in the format generated by commandToMsg
        back into a CommandMessage object.
        Expected Format: [command]|[param_key_1]:[param_value_1];[param_key_2]:[param_value_2]...
    */
    if (len <= 0 || msg == nullptr) {
        throw InvalidSyncMessage();
    }

    string rawMsg(reinterpret_cast<const char*>(msg), len);
    CommandMessage commandMsg;

    // Split by '|' to separate command and parameters
    size_t delimiterPos = rawMsg.find('|');
    if (delimiterPos == string::npos) {
        throw InvalidSyncMessage();
    }

    // Extract and parse the command
    string commandPart = rawMsg.substr(0, delimiterPos);
    int commandValue = stoi(commandPart);
    if (commandValue < START_SAMPLING || commandValue > STOP_SAMPLE_FILES_UPLOAD) {
        throw InvalidSyncMessage();
    }
    commandMsg.command = static_cast<ControlUnitCommand>(commandValue);

    // Extract and parse the parameters
    string paramsPart = rawMsg.substr(delimiterPos + 1);
    stringstream paramsStream(paramsPart);
    string param;

    while (getline(paramsStream, param, ';')) {
        size_t colonPos = param.find(':');
        if (colonPos == string::npos) {
            throw InvalidSyncMessage();
        }

        string key = param.substr(0, colonPos);
        string value = param.substr(colonPos + 1);
        commandMsg.params[key] = value;
    }

    return commandMsg;
}